const Joi = require('joi');

const errMessages = (errors) => {
    errors.forEach( err => {
        switch (err.code){
            case "string.empty":
                err.message = `Pole jest wymagane`;
                break;
            case "string.min":
                err.message = `Pole powinno zawierać co najmniej ${err.local.limit} znaki`;
                break;
            case "string.max":
                err.message = `Pole powinno zawierać co najwięcej ${err.local.limit} znaki`;
                break;
            case "number.base":
                err.message = `Pole jest wymagane`;
                break;
            case "number.max":
                err.message = `Pole powinno być liczbą w zakresie od 0.1 do 10 000`;
                break;
            case "number.min":
                err.message = `Pole powinno być liczbą w zakresie od 0.1 do 10 000`;
                break;
            case "date.base":
                err.message = `Pole jest wymagane`;
                break;
            case "date.max":
                err.message = `Data nie może być z przyszłości`;
                break;

            default:
                break;
        }
    });
    return errors;
}

const aSchema = Joi.object({
    idAnimal: Joi.number()
        .optional()
        .allow(""),
    name: Joi.string()
        .min(2)
        .max(30)
        .required()
        .error(errMessages),
    species: Joi.string()
        .min(2)
        .max(30)
        .required()
        .error(errMessages),
    breed: Joi.string()
        .allow("")
        .min(2)
        .max(50)
        .error(errMessages),
    weight: Joi.number()
        .min(0.1)
        .max(10000.0)
        .required()
        .error(errMessages),
    birthDate: Joi.date()
        .max("now")
        .required()
        .error(errMessages),
    idClient: Joi.number()
            .required()
            .error(errMessages)

});


module.exports = aSchema;